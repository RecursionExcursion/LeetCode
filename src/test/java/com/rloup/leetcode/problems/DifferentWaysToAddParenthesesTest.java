package com.rloup.leetcode.problems;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiPredicate;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertTrue;

class DifferentWaysToAddParenthesesTest {

    private final DifferentWaysToAddParentheses waysToAddParentheses = new DifferentWaysToAddParentheses();

    @Test
    void diffWaysTPCompute() {

        List<Integer> act2 = waysToAddParentheses.diffWaysToCompute2("2*3-4*5");
        List<Integer> act4 = waysToAddParentheses.diffWaysToCompute2("2-1-1-1-1"); //14 Outputs
        List<Integer> act1 = waysToAddParentheses.diffWaysToCompute2("2-1-1");
        List<Integer> act3 = waysToAddParentheses.diffWaysToCompute2("11");
        List<Integer> act5 = waysToAddParentheses.diffWaysToCompute("1-2+3*4-5*6-7+8*9");



        List<Integer> exp1 = List.of(0, 2);
        List<Integer> exp2 = List.of(-34, -14, -10, -10, 10);
        List<Integer> exp3 = List.of(11);
        List<Integer> exp4 = List.of(2, 0, 2, 2, 4, 0, 2, 2, 0, 0, 2, 0, 0, -2);

        BiPredicate<ArrayList<Integer>, ArrayList<Integer>> listsAreEqual = (list1, list2) -> {
            if (list1.size() != list2.size()) return false;


            while (!list1.isEmpty()) {
                Integer i = list1.get(0);
                if (list2.contains(i)) {
                    list1.remove(i);
                    list2.remove(i);
                } else {
                    return false;
                }
            }
            return true;
        };
        int[] arr = {-1108,-1948,1052,-1228,932,-160,-328,188,272,-1228,932,392,68,824,-220,-388,212,-244,188,314,482,254,422,-244,-160,-220,-118,-178,-1324,836,296,-28,728,-244,188,1106,566,-460,296,-244,674,134,-378,-658,342,-418,302,-62,-118,54,82,-418,302,122,14,266,-220,-388,212,-244,188,510,902,-498,566,-442,156,212,96,152,96,152,96,152,36,92,-100,-16,-76,26,-34,-90,-62,-76,-66,12,-48,-48,-48,-108,-1324,836,296,-28,728,-244,188,1106,566,-460,296,-244,674,134,-514,206,26,-82,170,-244,188,566,-442,836,296,296,296,-244,-316,440,-100,818,278,-226,26,-100,-10,692,152,152,152,-388,-1844,-3244,1756,-2044,1556,-264,-544,316,456,-2044,1556,656,116,1376,-364,-644,356,-404,316,526,806,426,706,-404,-264,-364,-194,-294,-2204,1396,496,-44,1216,-404,316,1846,946,-764,496,-404,1126,226,-378,-658,342,-418,302,-62,-118,54,82,-418,302,122,14,266,-384,-664,336,-424,296,-68,-124,48,76,-424,296,116,8,260,-72,-128,72,-80,64,658,1162,-638,730,-566,-364,-644,356,-404,316,658,1162,-638,730,-566,1096,1936,-1064,1216,-944,156,212,96,152,96,152,96,152,36,92,210,266,110,166,96,152,90,146,86,142,26,82,110,166,26,82,-10,46,-100,-16,-76,26,-34,-90,-62,-76,-66,12,-48,-48,-48,-108,-116,24,-76,94,-6,-90,-62,-96,-68,-72,-62,-76,-62,-56,12,-48,-48,-48,-108,66,-34,-48,-54,-58,-118,-34,-118,-154,-1340,820,280,-44,712,-260,172,1090,550,-476,280,-260,658,118,-530,190,10,-98,154,-260,172,550,-458,820,280,280,280,-260,-332,424,-116,802,262,-242,10,-116,-26,676,136,136,136,-404,-2204,1396,496,-44,1216,-404,316,1846,946,-764,496,-404,1126,226,-530,190,10,-98,154,-584,136,-44,-152,100,-80,64,730,-566,-404,316,730,-566,1216,-944,820,280,280,280,-260,1306,406,280,226,190,-350,406,-350,-674,-332,424,-116,802,262,-242,10,-116,-26,676,136,136,136,-404,-476,784,-116,1414,514,-242,10,-296,-44,-80,10,-116,10,64,676,136,136,136,-404,1162,262,136,82,46,-494,262,-494,-818,1106,1946,-1054,1226,-934,158,326,-190,-274,1226,-934,-394,-70,-826,218,386,-214,242,-190,-316,-484,-256,-424,242,158,218,116,176,1322,-838,-298,26,-730,242,-190,-1108,-568,458,-298,242,-676,-136,376,656,-344,416,-304,60,116,-56,-84,416,-304,-124,-16,-268,218,386,-214,242,-190,-512,-904,496,-568,440,-158,-214,-98,-154,-98,-154,-98,-154,-38,-94,98,14,74,-28,32,88,60,74,64,-14,46,46,46,106,1322,-838,-298,26,-730,242,-190,-1108,-568,458,-298,242,-676,-136,512,-208,-28,80,-172,242,-190,-568,440,-838,-298,-298,-298,242,314,-442,98,-820,-280,224,-28,98,8,-694,-154,-154,-154,386,-1476,-2596,1404,-1636,1244,-212,-436,252,364,-1636,1244,524,92,1100,-292,-516,284,-324,252,420,644,340,564,-324,-212,-292,-156,-236,-1764,1116,396,-36,972,-324,252,1476,756,-612,396,-324,900,180,738,1298,-702,818,-622,106,218,-126,-182,818,-622,-262,-46,-550,146,258,-142,162,-126,-210,-322,-170,-282,162,106,146,78,118,882,-558,-198,18,-486,162,-126,-738,-378,306,-198,162,-450,-90,352,632,-368,392,-328,36,92,-80,-108,392,-328,-148,-40,-292,346,626,-374,386,-334,30,86,-86,-114,386,-334,-154,-46,-298,376,656,-344,416,-304,60,116,-56,-84,416,-304,-124,-16,-268,349,629,-371,389,-331,33,89,-83,-111,389,-331,-151,-43,-295,373,653,-347,413,-307,57,113,-59,-87,413,-307,-127,-19,-271,-146,-258,142,-162,126,584,1032,-568,648,-504,-438,-774,426,-486,378,584,1032,-568,648,-504,1022,1806,-994,1134,-882,292,516,-284,324,-252,-438,-774,426,-486,378,-292,-516,284,-324,252,146,258,-142,162,-126,1314,2322,-1278,1458,-1134,1752,3096,-1704,1944,-1512,-438,-774,426,-486,378,1533,2709,-1491,1701,-1323,-219,-387,213,-243,189,-2,-58,-62,-118,-62,-118,-62,-118,-122,-178,52,-4,-48,-104,-62,-118,-68,-124,-72,-128,-132,-188,-48,-104,-132,-188,-168,-224,-158,-214,-98,-154,-98,-154,-98,-154,-38,-94,25,-31,-55,-111,-131,-187,-91,-147,-122,-178,-128,-184,-98,-154,-125,-181,-101,-157,-67,-123,-127,-183,-43,-99,-127,-183,-163,-219,-103,-159,-43,-99,-55,-111,-91,-147,-187,-243,-223,-279,-43,-99,-205,-261,-61,-117,44,128,68,170,110,54,82,68,78,156,96,96,96,36,28,168,68,238,138,54,82,48,76,72,82,68,82,88,156,96,96,96,36,210,110,96,90,86,26,110,26,-10,98,14,74,-28,32,88,60,74,64,-14,46,46,46,106,36,148,68,204,124,90,34,74,6,46,64,36,58,30,88,60,61,33,85,57,70,80,66,80,86,76,66,68,74,90,96,66,93,69,142,82,82,82,22,196,96,82,76,72,12,96,12,-24,-14,46,46,46,106,169,89,13,53,22,16,46,19,43,77,17,101,17,-19,41,101,89,53,-43,-79,101,-61,83,-1332,828,288,-36,720,-252,180,1098,558,-468,288,-252,666,126,-522,198,18,-90,162,-252,180,558,-450,828,288,288,288,-252,-324,432,-108,810,270,-234,18,-108,-18,684,144,144,144,-396,-2196,1404,504,-36,1224,-396,324,1854,954,-756,504,-396,1134,234,-522,198,18,-90,162,-576,144,-36,-144,108,-72,72,738,-558,-396,324,738,-558,1224,-936,828,288,288,288,-252,1314,414,288,234,198,-342,414,-342,-666,-324,432,-108,810,270,-234,18,-108,-18,684,144,144,144,-396,-468,792,-108,1422,522,-234,18,-288,-36,-72,18,-108,18,72,684,144,144,144,-396,1170,270,144,90,54,-486,270,-486,-810,1314,-846,-306,18,-738,234,-198,-1116,-576,450,-306,234,-684,-144,504,-216,-36,72,-180,234,-198,-576,432,-846,-306,-306,-306,234,306,-450,90,-828,-288,216,-36,90,0,-702,-162,-162,-162,378,-1764,1116,396,-36,972,-324,252,1476,756,-612,396,-324,900,180,882,-558,-198,18,-486,162,-126,-738,-378,306,-198,162,-450,-90,288,-432,-252,-144,-396,234,-486,-306,-198,-450,504,-216,-36,72,-180,261,-459,-279,-171,-423,477,-243,-63,45,-207,-162,126,648,-504,-486,378,648,-504,1134,-882,324,-252,-486,378,-324,252,162,-126,1458,-1134,1944,-1512,-486,378,1701,-1323,-243,189,558,18,18,18,-522,1044,144,18,-36,-72,-612,144,-612,-936,-846,-306,-306,-306,234,801,81,-603,-243,-522,-576,-306,-549,-333,-27,-567,189,-567,-891,-351,189,81,-243,-1107,-1431,189,-1269,27,-180,576,36,954,414,-90,162,36,126,828,288,288,288,-252,-324,936,36,1566,666,-90,162,-144,108,72,162,36,162,216,828,288,288,288,-252,1314,414,288,234,198,-342,414,-342,-666,306,-450,90,-828,-288,216,-36,90,0,-702,-162,-162,-162,378,-252,756,36,1260,540,234,-270,90,-522,-162,0,-252,-54,-306,216,-36,-27,-279,189,-63,54,144,18,144,198,108,18,36,90,234,288,18,261,45,702,162,162,162,-378,1188,288,162,108,72,-468,288,-468,-792,-702,-162,-162,-162,378,945,225,-459,-99,-378,-432,-162,-405,-189,117,-423,333,-423,-747,-207,333,225,-99,-963,-1287,333,-1125,171};

        Arrays.stream(arr).boxed().collect(Collectors.toCollection(ArrayList::new));

        assertTrue(listsAreEqual.test(new ArrayList<>(exp1), new ArrayList<>(act1)));
        assertTrue(listsAreEqual.test(new ArrayList<>(exp2), new ArrayList<>(act2)));
        assertTrue(listsAreEqual.test(new ArrayList<>(exp3), new ArrayList<>(act3)));
        assertTrue(listsAreEqual.test(new ArrayList<>(exp4), new ArrayList<>(act4)));
        assertTrue(listsAreEqual.test(Arrays.stream(arr).boxed().collect(Collectors.toCollection(ArrayList::new)),
                                      new ArrayList<>(act5)));
    }
}